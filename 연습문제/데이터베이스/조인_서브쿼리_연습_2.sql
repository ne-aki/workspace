-- 1. 도서 테이블 생성
CREATE TABLE TEST_BOOK (
    BOOK_ID INT PRIMARY KEY AUTO_INCREMENT,
    TITLE VARCHAR(100),
    AUTHOR VARCHAR(50),
    PUBLISHED_YEAR INT,
    CREATED_AT DATETIME DEFAULT SYSDATE()
);

-- 2. 대출 테이블 생성 (외래키 사용)
CREATE TABLE RENTAL (
    RENTAL_ID INT PRIMARY KEY AUTO_INCREMENT,
    BOOK_ID INT REFERENCES TEST_BOOK (BOOK_ID),
    BORROWER_NAME VARCHAR(50),
    RENTAL_DATE DATETIME DEFAULT SYSDATE(),
    RETURN_DATE DATETIME NULL
);

-- 3. 도서 데이터 삽입
INSERT INTO TEST_BOOK (TITLE, AUTHOR, PUBLISHED_YEAR) VALUES 
('데이터베이스 설계', '김철수', 2019),
('파이썬 프로그래밍', '이영희', 2021),
('웹 개발 기초', '박민준', 2018),
('운영체제 이론', '정하나', 2020),
('알고리즘 문제해결', '최수진', 2022);

-- 4. 대출 데이터 삽입
INSERT INTO RENTAL (BOOK_ID, BORROWER_NAME, RENTAL_DATE, RETURN_DATE) VALUES
(1, '김민수', '2024-01-05 14:00:00', '2024-01-15 12:00:00'),
(2, '이서연', '2024-02-01 10:30:00', NULL),
(3, '박지훈', '2024-01-20 16:45:00', '2024-01-30 09:00:00'),
(4, '정예원', '2024-02-10 11:15:00', NULL);

COMMIT;

#도서 제목, 저자, 대출자 이름, 대출 날짜를 조회하시오.
SELECT
	TITLE
	, AUTHOR
	, BORROWER_NAME
	, RENTAL_DATE
FROM TEST_BOOK B INNER JOIN RENTAL R
ON B.BOOK_ID = R.BOOK_ID;

SELECT
	TITLE
	, AUTHOR
	, (
		SELECT
			BORROWER_NAME
		FROM RENTAL
		WHERE BOOK_ID = TEST_BOOK.BOOK_ID
	) AS 대출자이름
	, (
		SELECT
			RENTAL_DATE
		FROM RENTAL
		WHERE BOOK_ID = TEST_BOOK.BOOK_ID
	) AS 대출날짜
FROM test_book;

SELECT
	BORROWER_NAME
	, RENTAL_DATE
	, (
		SELECT TITLE
		FROM TEST_BOOK
		WHERE BOOK_ID = rental.BOOK_ID
	) AS TITLE
	, (
		SELECT AUTHOR
		FROM TEST_BOOK
		WHERE BOOK_ID = rental.BOOK_ID
	) AS AUTHOR
FROM rental;

#출판 연도가 2020년 이후인 도서 중 대출된 적이 있는 도서의 모든 정보를 조회하시오.
SELECT *
FROM TEST_BOOK
WHERE PUBLISHED_YEAR >= 2020
AND BOOK_ID
IN(
	SELECT DISTINCT BOOK_ID
	FROM rental
);


#한 번도 대출되지 않은 도서의 제목과 저자를 조회하시오.
SELECT
	TITLE
	, AUTHOR
FROM test_book
WHERE BOOK_ID
NOT IN (
	SELECT DISTINCT
	BOOK_ID FROM rental
);

#모든 도서의 제목, 대출횟수, 대출 여부를 출력하세요. 대출 여부는 한번이라도 대출된 적이 있는
#책은 '대출기록있음', 대출된 적이 없는 도서에는 '대출이력없음'으로 조회하시오.
SELECT
	TITLE
	, BOOK_ID
	, (
		SELECT COUNT(RENTAL_ID)
		FROM RENTAL
		WHERE BOOK_ID = test_book.BOOK_ID
	) AS 대출횟수
	, CASE (
		SELECT COUNT(RENTAL_ID)
		FROM rental
		WHERE BOOK_ID = test_book.BOOK_ID
	)
		WHEN 0 THEN '대출 이력 없음'
		ELSE '대출 기록 있음' END
		AS '대출 여부'
FROM test_book;

#CASE
#	WHEN 조건 THEN 값
#	WHEN 조건 THEN 값
#	ELSE 값 END
	
#CASE 컬럼
#	WHEN 값THEN 값
#	WHEN 값 THEN 값
#	ELSE 값 END

#1번 책이 대출 이력이 있다.
SELECT COUNT(RENTAL_ID)
FROM rental
WHERE BOOK_ID = 1;

SELECT * FROM TEST_BOOK;
SELECT * FROM RENTAL;